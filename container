#!/bin/bash

echo 'Setting environmnet variables...'
source config/initializers/set_env.sh

# Name of image & container.
image_name=$NAME
container_name=$NAME


external_port=$EXTERNAL_PORT
internal_port='3000'

# Build docker image based on Dockerfile, if creating or starting container.
if [ "$1" = "-c" ] || [ "$1" = "-s" ] || [ "$1" = "-r" ] || [ "$1" = "-t" ]; then
	echo "Building $image_name image..."
	docker build -t "$image_name" .
fi

# -h
# Print help.
if [ "$1" = "-h" ]; then
	help_output= cat <<HelpText
APP DOCKER MANAGER

This script manages Docker for this application. It may need to be run as
the root user on your system. The create, test, start & restart flags attempt
to build or rebuild the image based on the Dockerfile before executing.

ARGUMENTS

    -h
     	Prints help text.

    -c
    	Creates & starts a container based on '$container_name' image.

    -s
    	Starts the container named '$container_name'.

    -r
    	Pulls code from the origin repository & restarts the container named '$container_name'.

    -i
    	Inspects the container named '$container_name'.

    -l
    	Displays the log of the container.

    -t
    	Runs the test suite for the application.

    --compile
        Compile assets.

    --interactive
    	Runs an interactive container.

    --status
    	Shows status of the container.

    --stop
    	Stops a container named '$container_name'.

    --delete
        Deletes a container named '$container_name'.
HelpText

	echo $help_output
fi

# -c
# Creates & runs the container.
if [ "$1" = "-c" ]; then
    rm tmp/pids/server.pid
	echo "Creating & starting $containter_name container..."
	docker run -d -v $PWD:/opt/app -p $external_port:$internal_port \
	-e RAILS_ENV=$ENVIRONMENT --name="$container_name" $image_name
fi

# -s
# Starts the container.
if [ "$1" = "-s" ]; then
	echo "Starting $container_name container..."
	docker start $container_name
fi

# -r
# Restart the container.
if [ "$1" = "-r" ]; then
    git pull origin master
	echo "Restarting $container_name container..."
	docker restart --time=0 $container_name
fi

# -i
# Inspects container.
if [ "$1" = "-i" ]; then
	docker inspect $container_name
fi

# -l
# Show logs.
if [ "$1" = "-l" ]; then
	docker logs -f -t $container_name
fi

# -t
# Run tests.
if [ "$1" = "-t" ]; then
	docker run --rm	-v $PWD:/opt/app -e RAILS_ENV='test' $image_name \
    /bin/bash -c "rspec spec/"
fi

# --compile
# Compile assets
if [ "$1" = "--compile" ]; then
    echo "Compiling assets..."
	docker run --rm	-v $PWD:/opt/app -e RAILS_ENV=$ENVIRONMENT $image_name \
    /bin/bash -c "source config/initializers/set_env.sh; bundle; bundle exec rake assets:clean; bundle exec rake assets:precompile"
fi

# --interactive
# Run interactive container
if [ "$1" = "--interactive" ]; then
	docker exec -it $container_name bash
fi

# --status
# Shows status.
if [ "$1" = "--status" ]; then
	docker ps -a --filter "name=$container_name"
fi

# --stop
# Stop the container.
if [ "$1" = "--stop" ]; then
	echo "Stopping $container_name container..."
	docker stop --time=0 $container_name
fi

# --delete
# Deletes container.
if [ "$1" = "--delete" ]; then
	echo "Deleting $container_name container..."
	docker rm $container_name
fi
